/**
 * 抽象类与接口
 * 
 * 一、final关键字
 * 	1、final关键字在java中被称为完结器，表示最终的意思
 * 	2、final能声明class、method、属性
 * 		使用final声明的class不能被继承
 * 			使用了final就好比变成了太监，不可能有子孙后代
 * 		使用final声明的method不能被重写
 * 		使用final声明的变量编程常量，常量是不可以被修改的
 * 
 * 二、抽象类
 * 	1、抽象类概念
 * 		包含一个抽象方法的类就是抽象类
 * 	2、抽象方法
 * 		声明而未被实现的方法，抽象方法必须使用abstract关键字声明
 * 	3、抽象类被子类继承，子类（如果不是抽象类）必须重写抽象类中的所有抽象方法
 * 	4、定义格式
 * 		abstract class className{
 * 			属性
 * 			方法
 * 			抽象方法
 * 		}
 * 	5、抽象类不能直接实例化，要通过其子类进行实例化
 * 
 * 三、接口
 * 	1、接口是Java中最重要的概念，接口可以理解为一种特殊的类，里面全部是由全局常量和公共的抽象方法所组成
 * 	2、接口的格式：
 * 		interface interfaceName{
 * 			全局常量
 * 			抽象方法
 * 		}
 * 	3、接口的实现也必须通过子类，使用关键字implements，而且接口是可以多实现的
 * 	4、一个子类可以同时继承抽象类和实现接口
 * 	5、一个接口不能继承一个抽象类，但是可以通过extends关键字同时继承多个接口，实现接口的多继承
 * 
 * 【抽象类和接口的区别】
 * 你选择使用接口和抽象类的依据是什么？ 
 * 接口和抽象类的概念不一样。
 * 接口是对动作的抽象，抽象类是对根源的抽象。
 * 抽象类表示的是，这个对象是什么。
 * 接口表示的是，这个对象能做什么。
 * 比如，男人，女人，这两个类（如果是类的话……），他们的抽象类是人。说明，他们都是人。
 * 人可以吃东西，狗也可以吃东西，你可以把“吃东西”定义成一个接口，然后让这些类去实现它.
 * 所以，在高级语言上，一个类只能继承一个类（抽象类）(正如人不可能同时是生物和非生物)，但是可以实现多个接口(吃饭接口、走路接口)。
 * 第一点． 接口是抽象类的变体，接口中所有的方法都是抽象的。而抽象类是声明方法的存在而不去实现它的类。 
 * 第二点． 接口可以继承，抽象类不行 
 * 第三点． 接口定义方法，不能实现，而抽象类可以实现部分方法。
 * 第四点． 接口中基本数据类型为static 而抽类象不是的。
 * 当你关注一个事物的本质的时候，用抽象类；
 * 当你关注一个操作的时候，用接口。 
 * 接口可以实现也可以继承，抽象类不行 
 * 抽象类的功能要远超过接口，但是，定义抽象类的代价高。
 * 因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。
 * 在这个类中，你必须继承或编写出其所有子类的所有共性。
 * 虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。
 * 而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度的。
 */
/**
 * @author Qiufan
 *
 */
package com.javabasis.ch14fai.fni;